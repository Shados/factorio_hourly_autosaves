local GUI, gui_callbacks
gui_callbacks = {}

-- Provides a proxy for generic GUI event types and dispatches them
-- per-element.
-- This lets me wire up event handlers to specific GUI elements, which I
-- personally find to be a nice approach.
GUI =
  handlers: {}


  on_init: ->
    if storage.gui
      GUI.on_load!
    else
      storage.gui = gui_callbacks
    return


  on_load: ->
    gui_callbacks = storage.gui


  register_callback: (element, handler_name, ...) ->
    assert GUI.handlers[handler_name] != nil, "No such GUI handler registered: #{handler_name}"
    player_gui_callbacks = gui_callbacks[element.player_index]
    unless player_gui_callbacks
      player_gui_callbacks = {}
      gui_callbacks[element.player_index] = player_gui_callbacks

    params = {...}
    player_gui_callbacks[element.index] = {handler_name, params}
    return


  deregister_callbacks: (element) ->
    player_gui_callbacks = gui_callbacks[element.player_index]
    return unless player_gui_callbacks
    player_gui_callbacks[element.index] = nil
    -- Recursively deregister callbacks for children
    for _, child_element in pairs element.children
      GUI.deregister_callbacks child_element
    return


  on_gui_event: (event) ->
    {:element} = event
    return unless (element and element.valid)
    player_gui_callbacks = gui_callbacks[element.player_index]
    return unless player_gui_callbacks
    registration = player_gui_callbacks[element.index]
    if registration
      {handler_name, params} = registration
      handler = GUI.handlers[handler_name]
      assert handler != nil, "No such GUI handler registered: #{handler_name}"
      handler(event, table.unpack params)
    return


  setup: ->
    script.on_event defines.events.on_gui_checked_state_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_click, GUI.on_gui_event
    script.on_event defines.events.on_gui_closed, GUI.on_gui_event
    script.on_event defines.events.on_gui_confirmed, GUI.on_gui_event
    script.on_event defines.events.on_gui_elem_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_location_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_opened, GUI.on_gui_event
    script.on_event defines.events.on_gui_selected_tab_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_selection_state_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_switch_state_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_text_changed, GUI.on_gui_event
    script.on_event defines.events.on_gui_value_changed, GUI.on_gui_event
    return

return GUI
